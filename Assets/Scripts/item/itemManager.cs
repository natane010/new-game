using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public enum useItemType
{
    //マンガン乾電池　正＋負＝9e ８二酸化マンガン　４亜鉛　塩化亜鉛　水　1.5v　大電流放電に容量低下が著しい　安い
    Mangan,
    //ボルタ電池　正負＝3e　銅　亜鉛　希硫酸　??v　水素ガスが出る　簡易
    Bolta,
    //ダニエル電池　正負4e　銅　亜鉛　硫酸銅　硫酸亜鉛　水　　??v　水素ガスは出ないが亜鉛イオンがすぐ飽和する　次に簡易
    Danieru,
    //ルクランシェ　正負3e　銅　二酸化マンガン　炭素　亜鉛　塩化アンモニウム　??v　水素ガスも出ない　亜鉛イオンもすぐ飽和しない　重いでかい高い
    Rukurannsye,
    //アルカリ　正負4e　２二酸化マンガン　２亜鉛　水酸化カリウム　硫化亜鉛　1.5v　容量がマンガンより大きく寿命が長い大電流耐性も十分　液漏れが起きやすい
    Arukari,
    //ニッケル　正負3e　オキシ水酸化ニッケル　二酸化マンガン　亜鉛　水酸化カリウム　水　硫化亜鉛　1.5v　大から中電流に強く耐性が大きいが　小電流では寿命が尽きやすい
    Nikkeru,
    //水銀電池　正負4e　酸化水銀　亜鉛　水酸化カリウム　水　酸化亜鉛　1.35ｖ　電圧が安定し長寿命　水銀が使われるので国内では製造されていない
    Suiginn,
    //酸化銀電池　正負4e　酸化銀　亜鉛　水酸化カリウム　水　酸化亜鉛　1.55v　銀が高い　寿命長い　密度も高く汎用性あり
    Sannkaginn,
    //空気電池　正負8e　酸素　亜鉛　水酸化カリウム　水　1.4ｖ　寿命が長い　汎用性あり　とてつもなく制作難易度高い
    Kuuki,
    //二酸化マンガンリチウム電池　正負2e　二酸化マンガン　リチウム　有機溶媒　リチウム塩　3ｖ　寿命が長く汎用性あり　高い
    Nisannkamanngann,
    //2次電池ーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーー
    //鉛蓄電池　正負4e　二酸化鉛　鉛　希硫酸　２ｖ　寿命が弱く放電が大きい　簡易
    Enntiku,
    //アルカリ畜電池　正負3e　オキシ水酸化ニッケル　カドミウム　水酸化カリウム　1.2v　ワット、アンペアの効率が悪い　放電充電効率がいい　寿命が長くメモリー効果がある
    Arukaritiku,
    //ニッケル水素電池　正負2e　オキシ水酸化ニッケル　水素吸蔵合金　水酸化カリウム　1.2v　汎用性が高い高負荷も可能　メモリー効果あり　発熱がある　そもそも水素吸蔵合金がない
    Nikkerusuiso,
    //リチウムイオン電池　正負ｘ2e　リチウム含有金属酸化物　炭素　有機溶媒　リチウム塩　3.6v　汎用性が高い特に欠点はないが可燃性であるまたメモリー効果はあり
    Ritiumuionn,
    //燃料電池ーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーー
    //伝説の電池　正負2e　謎合金　伝説の合金　水素　酸素　実測データ無し約3.0vだと考えられる　欠点はなし　高すぎる　合金データもなし謎の電池　高校知識では酸素と水素で水と電気(エネルギー)を作るでオッケー
    Nennryoudennti,
}

public enum itemType //アイテム静的メソッドに変える
{
    MnO2,
    Zn,
    NaCl,
    ZnCl,
    H2O,
    Cu,
    H2SO4,
    CuSO4,
    ZnSO4,
    C,
    NH4Cl,
    KOH,
    Ni2O3,
    HgO,
    AgO,
    Li,　　 //リチウム塩も含む
    Alcohol,  //いろいろな理由から　アルコール　で有機溶媒は統一
    PbO2,
    Pb,
    Cd,
    Alloy,  //合金系はこれで統一
    MysteryAlloy,   //ミステリー合金
    LegendaryAlloy, //伝説合金
}

public class itemManager : MonoBehaviour
{
    // Start is called before the first frame update
    void Start()
    {
        
    }

    // Update is called once per frame
    void Update()
    {
        
    }
}
